# K3s Local Agent - Tunnel & Control Plane Data Flow Analysis
# Generated: $(date)
# System: $(uname -a)

## 🔄 **Tunnel Architecture Overview**

The K3s Local Agent implements a sophisticated **bidirectional tunnel system** that enables:
1. **Push-based data reception** from control plane
2. **IP redirection tunneling** for staging pods
3. **Port forwarding** for local development
4. **DNS redirection** for seamless access

## 📡 **Control Plane Data Reception**

### **1. HTTP Server Tunnel (Control Plane → Agent)**

**Server Configuration:**
- **Port**: 8082 (configurable)
- **Protocol**: HTTP/HTTPS
- **Authentication**: Agent ID validation
- **Endpoints**: 
  - `/api/v1/pods` - Pod updates
  - `/api/v1/pods/status` - Status queries
  - `/health` - Health checks

**Data Flow:**
```
Control Plane → HTTP POST → PodReceiver → Local Staging Agent → Kind Cluster
```

**Code Implementation:**
```go
// PodReceiver starts HTTP server
func (pr *PodReceiver) Start() error {
    mux := http.NewServeMux()
    mux.HandleFunc("/api/v1/pods", pr.handlePodUpdate)
    mux.HandleFunc("/api/v1/pods/status", pr.handleGetPodStatus)
    mux.HandleFunc("/health", pr.handleHealth)
    
    pr.server = &http.Server{
        Addr:    fmt.Sprintf(":%d", pr.port), // :8082
        Handler: mux,
    }
}
```

**Data Reception Process:**
1. **Control plane sends POST request** with pod specifications
2. **Agent ID validation** ensures security
3. **Pod data stored** in memory map
4. **Synchronization** triggers local pod creation
5. **IP redirection** setup for seamless access

### **2. Data Structure Received from Control Plane**

```json
{
  "agent_id": "staging-agent-hostname-1234567890",
  "pods": [
    {
      "id": "pod-123",
      "name": "my-app",
      "namespace": "staging",
      "image": "nginx:latest",
      "status": "running",
      "ip": "10.0.1.100",
      "node_name": "gke-node-1",
      "labels": {"app": "my-app"},
      "created_at": "2024-01-15T10:30:00Z",
      "updated_at": "2024-01-15T10:30:00Z"
    }
  ],
  "action": "create"
}
```

## 🌐 **IP Redirection Tunnel System**

### **1. Tunnel Architecture**

```
Internet → Local Port (8080-9000) → Port Forwarding → Staging Pod IP
```

**Components:**
- **Local Port**: Assigned from range 8080-9000
- **Port Forwarding**: Using socat/netcat
- **DNS Redirection**: /etc/hosts modification
- **Status Tracking**: Real-time monitoring

### **2. Tunnel Setup Process**

**Step 1: Port Assignment**
```go
func (irm *IPRedirectionManager) assignLocalPort(redirection *PodRedirection) error {
    for port := 8080; port <= 9000; port++ {
        if irm.isPortAvailable(port) {
            redirection.LocalPort = port
            return nil
        }
    }
    return fmt.Errorf("no available ports in range 8080-9000")
}
```

**Step 2: Port Forwarding Setup**
```go
func (irm *IPRedirectionManager) setupPortForwarding(redirection *PodRedirection) error {
    // Using socat for port forwarding
    cmd := exec.Command("socat",
        "TCP-LISTEN:"+fmt.Sprintf("%d", redirection.LocalPort),
        fmt.Sprintf("TCP:%s:%d", redirection.StagingPodIP, redirection.StagingPort),
        "&")
    
    // Fallback to netcat if socat fails
    if err != nil {
        cmd = exec.Command("nc", "-l", fmt.Sprintf("%d", redirection.LocalPort))
    }
}
```

**Step 3: DNS Redirection**
```go
func (irm *IPRedirectionManager) setupDNSRedirection(redirection *PodRedirection) error {
    // Add entry to /etc/hosts for local resolution
    hostsEntry := fmt.Sprintf("%s %s-staging.local", 
        redirection.LocalPodIP, redirection.StagingPodName)
    
    cmd := exec.Command("sh", "-c", 
        fmt.Sprintf("echo '%s' >> /tmp/staging_hosts", hostsEntry))
}
```

### **3. Tunnel Data Flow**

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Developer     │    │   Local Port    │    │  Staging Pod    │
│   Browser/App   │───►│   (8080-9000)   │───►│   (GCS Cluster) │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
   my-app-staging.local    localhost:8085        10.0.1.100:80
```

## 🔄 **Bidirectional Communication**

### **1. Agent → Control Plane (Status Updates)**

**Outgoing Data Flow:**
```go
func (lsa *LocalStagingAgent) sendStatusToControlPlane() {
    status := lsa.GetStagingStatus()
    url := fmt.Sprintf("%s/api/v1/staging/status", lsa.controlPlaneURL)
    
    req, err := http.NewRequest("POST", url, strings.NewReader(string(jsonData)))
    req.Header.Set("Content-Type", "application/json")
    req.Header.Set("X-Agent-ID", lsa.agentID)
}
```

**Status Data Sent:**
```json
{
  "agent_id": "staging-agent-hostname-1234567890",
  "status": "healthy",
  "total_pods": 5,
  "running_pods": 4,
  "failed_pods": 1,
  "staging_pods": {...},
  "kind_cluster_status": "ready",
  "last_sync": "2024-01-15T10:30:00Z",
  "timestamp": "2024-01-15T10:30:00Z"
}
```

### **2. Control Plane → Agent (Pod Updates)**

**Incoming Data Flow:**
```go
func (pr *PodReceiver) handlePodUpdate(w http.ResponseWriter, r *http.Request) {
    var request PodUpdateRequest
    json.NewDecoder(r.Body).Decode(&request)
    
    // Verify agent ID
    if request.AgentID != pr.agentID {
        http.Error(w, "Invalid agent ID", http.StatusUnauthorized)
        return
    }
    
    // Process pod updates
    switch request.Action {
    case "update", "create":
        for _, pod := range request.Pods {
            pr.podData[pod.ID] = pod
        }
    case "delete":
        for _, pod := range request.Pods {
            delete(pr.podData, pod.ID)
        }
    }
}
```

## 🛡️ **Security & Authentication**

### **1. Agent ID Validation**
- **Unique Agent ID**: Generated as `hostname-timestamp`
- **Request Validation**: All incoming requests validated
- **Unauthorized Access**: Blocked with 401 status

### **2. Network Security**
- **Port Range**: Limited to 8080-9000 for redirections
- **Local Access**: Only localhost connections allowed
- **Process Isolation**: Separate processes for each tunnel

## 📊 **Tunnel Monitoring & Health**

### **1. Health Check Endpoints**
```go
func (pr *PodReceiver) handleHealth(w http.ResponseWriter, r *http.Request) {
    response := map[string]interface{}{
        "status":    "healthy",
        "agent_id":  pr.agentID,
        "timestamp": time.Now(),
        "pod_count": len(pr.podData),
    }
}
```

### **2. Redirection Status Monitoring**
```go
func (irm *IPRedirectionManager) GetRedirectionStatus() map[string]interface{} {
    return map[string]interface{}{
        "total_redirections":  len(irm.redirections),
        "active_redirections": activeCount,
        "failed_redirections": failedCount,
        "redirections":        irm.redirections,
        "timestamp":           time.Now(),
    }
}
```

## 🔧 **Tunnel Configuration**

### **1. Redirection Configuration**
```go
type RedirectionConfig struct {
    AgentID           string
    LocalHost         string        // "localhost"
    PortRangeStart    int           // 8080
    PortRangeEnd      int           // 9000
    EnablePortForward bool          // true
    EnableDNSProxy    bool          // true
}
```

### **2. Staging Configuration**
```go
type StagingConfig struct {
    AgentID          string
    ControlPlaneURL  string        // "http://localhost:8080"
    ControlPlanePort int           // 8080
    KindClusterName  string        // "staging-cluster"
    LocalNamespace   string        // "staging"
    AgentPort        int           // 8082
    SyncInterval     time.Duration // 30s
}
```

## 🚀 **Tunnel Usage Examples**

### **1. Accessing Staging Pods**
```bash
# Direct IP access
curl http://localhost:8085

# DNS-based access
curl http://my-app-staging.local

# Health check
curl http://localhost:8082/health
```

### **2. Monitoring Tunnel Status**
```bash
# Check active redirections
curl http://localhost:8082/api/v1/pods/status

# Check port usage
lsof -i :8085

# Check DNS entries
cat /tmp/staging_hosts
```

## ⚠️ **Tunnel Limitations & Considerations**

### **1. Port Conflicts**
- **Limited Range**: 8080-9000 ports only
- **Port Exhaustion**: Maximum 120 concurrent tunnels
- **Port Availability**: Dynamic port assignment

### **2. Network Dependencies**
- **Socat/Netcat**: Required for port forwarding
- **DNS Resolution**: /etc/hosts modification needed
- **Firewall Rules**: May require local exceptions

### **3. Performance Considerations**
- **Latency**: Additional hop through local port
- **Bandwidth**: Limited by local network capacity
- **Concurrency**: Multiple tunnels may impact performance

## 🔍 **Troubleshooting Tunnel Issues**

### **1. Port Forwarding Issues**
```bash
# Check if socat is available
which socat

# Check port availability
netstat -an | grep :8085

# Kill conflicting processes
lsof -ti :8085 | xargs kill -9
```

### **2. DNS Resolution Issues**
```bash
# Check hosts file
cat /tmp/staging_hosts

# Test DNS resolution
nslookup my-app-staging.local

# Clear DNS cache
sudo dscacheutil -flushcache
```

### **3. Control Plane Connection Issues**
```bash
# Test control plane connectivity
curl -X POST http://control-plane:8080/api/v1/pods \
  -H "Content-Type: application/json" \
  -d '{"agent_id":"test","pods":[],"action":"test"}'

# Check agent server status
curl http://localhost:8082/health
```

## 📈 **Tunnel Performance Metrics**

### **1. Key Metrics**
- **Active Redirections**: Number of active tunnels
- **Port Utilization**: Percentage of available ports used
- **Response Time**: Latency through tunnel
- **Error Rate**: Failed redirection attempts

### **2. Monitoring Commands**
```bash
# Check tunnel status
curl -s http://localhost:8082/api/v1/pods/status | jq

# Monitor port usage
watch "netstat -an | grep LISTEN | grep :80"

# Check process status
ps aux | grep socat
```

This tunnel system provides a robust, secure, and scalable solution for local development with staging pods, enabling seamless access to remote resources while maintaining security and performance. 